(define defmethod (macro (methodname arglist body)
  (list (quote if)
        (list (quote eq) (quote methodname) (list (quote quote) methodname))
        (list (quote define) (quote ret) (list (quote lambda) arglist body)) (quote ()))))
(define . (macro (object methodname)
  (list object (list (quote quote) methodname))))

(define newcounter (lambda (m)
  ((closure (n)
    (lambda (methodname)
      ((lambda (ret)
      (progn
        (defmethod inc ()
          (define n (+ n 1)))
        (defmethod dec ()
          (define n (- n 1)))
        (defmethod print ()
          (print n ()))
        (defmethod set (arg)
          (define n arg))
        (defmethod get
          n)
        ret
          )) ()) ) )
    (if m m 0))))

(define counter1 (newcounter))
(define counter2 (newcounter 5))
(print (. counter1 print))
(print (. counter1 inc))
(print (. counter1 dec))
((. counter1 print))
((. counter1 inc))
((. counter1 inc))
((. counter1 inc))
((. counter1 dec))
((. counter1 print))
