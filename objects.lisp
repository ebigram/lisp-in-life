(define newcounter (lambda (m)
  ((closure (n)
    (lambda (arg)
      (if (eq arg (quote inc))
        (define n (+ n 1))
      (if (eq arg (quote dec))
        (define n (- n 1))
      (if (eq arg (quote print))
        (print n ())
                n
        ))))
        ) (if m m 0)) )
        )

(print 0 ())
(define counter1 (newcounter))
(define counter2 (newcounter 5))
(counter1 (quote print))
(counter1 (quote inc))
(counter1 (quote inc))
(counter1 (quote inc))
(counter1 (quote inc))
(counter1 (quote dec))

(counter2 (quote print))
(counter2 (quote inc))
(counter2 (quote inc))
(counter2 (quote inc))
(counter2 (quote inc))

(counter1 (quote print))
(counter2 (quote inc))
(counter2 (quote inc))
(counter2 (quote print))
