(define class (macro (fieldlist body)
  (list (quote lambda) (quote ())
  (list (list (quote closure) fieldlist
  (list (quote lambda) (list (quote methodname))
        (list (list (quote lambda) (list (quote ret)) (list (quote progn) body (quote ret))) (quote ()))
  
  )
  ))
  )
))
(define defmethod (macro (methodname arglist body)
  (list (quote if)
        (list (quote eq) (quote methodname) (list (quote quote) methodname))
        (list (quote define) (quote ret) (list (quote lambda) arglist body)) (quote ()))))
(define . (macro (object methodname)
  (list object (list (quote quote) methodname))))

(define newcounter (class (n)
  (progn
  (defmethod inc ()
          (define n (+ n 1)))
        (defmethod dec ()
          (define n (- n 1)))
        (defmethod set (arg)
          (define n arg))
        (defmethod get ()
          n)
  )
))
;; (define newcounter (lambda ()
;;   ((closure (n)
;;     (lambda (methodname)
;;       ((lambda (ret)
;;       (progn
;;         (defmethod inc ()
;;           (define n (+ n 1)))
;;         (defmethod dec ()
;;           (define n (- n 1)))
;;         (defmethod set (arg)
;;           (define n arg))
;;         (defmethod get ()
;;           n)
;;         ret
;;           )) ()) ) )
;;      ) ) )

(define counter1 (newcounter))
(define counter2 (newcounter))
((. counter1 set) 0)
((. counter2 set) 5)
(print ((. counter1 get)))
((. counter1 inc))
((. counter1 inc))
((. counter1 inc))
((. counter1 dec))
(print ((. counter1 get)))
