# Registers
.data
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0

# Special form strings
.data
# lambda_str:
	.string "lambda"
# print_str:
	.string "print"
# define_str:
	.string "define"
# quote_str:
	.string "quote"
# list_str:
	.string "list"
# if_str:
	.string "if"
# car_str:
	.string "car"
# while_str:
	.string "while"
# progn_str:
	.string "progn"
# macro_str:
	.string "macro"
# lambdaast_str:
	.string "lambda*"
# eq_str:
	.string "eq"
# cons_str:
	.string "cons"
# plus_str:
	.string "+"
# t_str:
	.string "t"
# mod_str:
	.string "mod"
# eval_str:
	.string "eval"
# cdr_str:
	.string "cdr"
# minus_str:
	.string "-"
# ast_str:
	.string "*"
# lt_str:
	.string "<"
# gt_str:
	.string ">"
# slash_str:
	.string "/"

# evalhash is defined with a negative offset here, to compensate for the offset in the jump hash calculation
.data
# atom_str:
evalhash:
	.string "atom"
.data

# The actual evalhash table starts here.
# Unused regions are allocated as global variables
    .long eval_createlambda
i:
    .long 0
q:
    .long 0
r:
    .long 0
    .long eval_print
j:
    .long 0
k:
    .long 0
    .long eval_define
_malloc_bytes:
    .long 0
_malloc_result:
    .long 0
    .long eval_quote
_str:
    .long 0
charbuf:
    .long 0
    .long eval_list
c:
    .long 0
s1:
    .long 0
    .long eval_if
    .long eval_car
s2:
    .long 0
    .long eval_while
s3:
    .long 0
stringTableHead:
    .long 0
    .long eval_progn
_stringtable:
    .long 0
_lambda:
    .long 0
    .long eval_createlambda
_env:
    .long 0
_env2:
    .long 0
    .long eval_createlambda
_env3:
    .long 0
_evalenv:
    .long 0
nil:
    .long 0
    .long eval_eq
true_value:
    .long 0
    .long eval_cons
_value:
    .long 0
    .long eval_arith
_list:
    .long 0
    .long eval_arith
initlist:
    .long 0
    .long eval_eval
curlist:
    .long 0
sthash:
    .long 0
    .long eval_cdr
stringtable:
    .long 0
    .long eval_arith
    .long eval_arith
    .long eval_cmp
    .long eval_cmp
    .long eval_arith
    .long eval_atom
.data
